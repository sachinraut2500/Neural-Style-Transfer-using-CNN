# -*- coding: utf-8 -*-
"""Neural Style Transfer using CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pKYgrwW1BbCxeOcU-7lO2w31ebT7-_yO
"""

# style_transfer_cnn.py

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.applications import vgg19
from tensorflow.keras.preprocessing.image import load_img, img_to_array

# Load and preprocess images
def load_and_process_img(path_to_img):
    max_dim = 512
    img = load_img(path_to_img)
    img = img_to_array(img)

    long = max(img.shape[:2])
    scale = max_dim / long
    img = tf.image.resize(img, (round(img.shape[0]*scale), round(img.shape[1]*scale)))
    img = img[tf.newaxis, :]
    img = vgg19.preprocess_input(img)
    return img

# Deprocess image for display
def deprocess_img(processed_img):
    x = processed_img.copy()
    if len(x.shape) == 4:
        x = np.squeeze(x, 0)
    x[:, :, 0] += 103.939
    x[:, :, 1] += 116.779
    x[:, :, 2] += 123.68
    x = x[:, :, ::-1]
    x = np.clip(x, 0, 255).astype('uint8')
    return x

# Compute content loss
def content_loss(base_content, target):
    return tf.reduce_mean(tf.square(base_content - target))

# Compute gram matrix for style loss
def gram_matrix(input_tensor):
    channels = int(input_tensor.shape[-1])
    a = tf.reshape(input_tensor, [-1, channels])
    n = tf.shape(a)[0]
    gram = tf.matmul(a, a, transpose_a=True)
    return gram / tf.cast(n, tf.float32)

# Compute style loss
def style_loss(base_style, gram_target):
    gram_style = gram_matrix(base_style)
    return tf.reduce_mean(tf.square(gram_style - gram_target))

# Load VGG19 and get layer outputs for style and content
def get_model():
    vgg = vgg19.VGG19(include_top=False, weights='imagenet')
    vgg.trainable = False
    style_layers = ['block1_conv1',
                    'block2_conv1',
                    'block3_conv1',
                    'block4_conv1',
                    'block5_conv1']
    content_layers = ['block5_conv2']
    output_layers = style_layers + content_layers
    outputs = [vgg.get_layer(name).output for name in output_layers]
    model = tf.keras.Model([vgg.input], outputs)
    return model, style_layers, content_layers

# Get style and content features
def get_feature_representations(model, content_path, style_path, style_layers, content_layers):
    content_img = load_and_process_img(content_path)
    style_img = load_and_process_img(style_path)
    outputs_content = model(content_img)
    outputs_style = model(style_img)

    style_features = [outputs_style[i] for i in range(len(style_layers))]
    content_features = [outputs_content[i + len(style_layers)] for i in range(len(content_layers))]
    return style_features, content_features

# Compute total loss
def compute_loss(model, loss_weights, init_image, gram_style_features, content_features, style_layers, content_layers):
    style_weight, content_weight = loss_weights
    outputs = model(init_image)
    style_output_features = outputs[:len(style_layers)]
    content_output_features = outputs[len(style_layers):]

    style_score = 0
    content_score = 0

    for target_style, comb_style in zip(gram_style_features, style_output_features):
        style_score += style_loss(comb_style[0], target_style)

    for target_content, comb_content in zip(content_features, content_output_features):
        content_score += content_loss(comb_content[0], target_content)

    style_score *= style_weight
    content_score *= content_weight
    loss = style_score + content_score
    return loss, style_score, content_score

# Compute gradients
@tf.function()
def compute_grads(cfg):
    with tf.GradientTape() as tape:
        loss = compute_loss(**cfg)[0]
    return tape.gradient(loss, cfg['init_image']), loss

def run_style_transfer(content_path, style_path,
                       num_iterations=1000,
                       content_weight=1e3,
                       style_weight=1e-2):
    model, style_layers, content_layers = get_model()
    style_features, content_features = get_feature_representations(model, content_path, style_path, style_layers, content_layers)
    gram_style_features = [gram_matrix(style_feature) for style_feature in style_features]

    init_image = load_and_process_img(content_path)
    init_image = tf.Variable(init_image, dtype=tf.float32)

    opt = tf.optimizers.Adam(learning_rate=5, beta_1=0.99, epsilon=1e-1)

    best_loss, best_img = float('inf'), None

    loss_weights = (style_weight, content_weight)

    cfg = {
        'model': model,
        'loss_weights': loss_weights,
        'init_image': init_image,
        'gram_style_features': gram_style_features,
        'content_features': content_features,
        'style_layers': style_layers,
        'content_layers': content_layers
    }

    import time
    start_time = time.time()

    for i in range(num_iterations):
        grads, loss = compute_grads(cfg)
        opt.apply_gradients([(grads, init_image)])
        clipped = tf.clip_by_value(init_image, -103.939, 255.0 - 103.939)
        init_image.assign(clipped)

        if loss < best_loss:
            best_loss = loss
            best_img = init_image.numpy()

        if i % 100 == 0:
            print(f"Iteration {i}: Loss={loss}")

    print(f"Total time: {time.time() - start_time:.2f}s")

    return deprocess_img(best_img)

def main():
    content_path = 'content.jpg'  # Replace with your content image path
    style_path = 'style.jpg'      # Replace with your style image path

    output = run_style_transfer(content_path, style_path, num_iterations=500)

    plt.imshow(output)
    plt.axis('off')
    plt.title("Neural Style Transfer Output")
    plt.show()

if __name__ == '__main__':
    main()